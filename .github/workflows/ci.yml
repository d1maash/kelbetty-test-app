name: 🧪 CI - Testing and Code Quality

on:
  push:
    branches: [ main, dev, dev-test ]
  pull_request:
    branches: [ main, dev ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'

jobs:
  # Code quality and linting
  lint:
    name: 🔍 Linting and Code Quality
    runs-on: [self-hosted, linux, x64]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔍 ESLint check
        run: npm run lint

      - name: 🏗️ TypeScript build check
        run: npx tsc --noEmit

  # Testing with database
  test:
    name: 🧪 Testing
    runs-on: [self-hosted, linux, x64]
    needs: lint

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: kelbetty_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🗄️ Setup test database
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/kelbetty_test?schema=public
        run: |
          npx prisma generate
          npx prisma db push

      - name: 🧪 Run tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/kelbetty_test?schema=public
          NODE_ENV: test
        run: |
          # If you have tests, uncomment:
          # npm test
          echo "Tests will be added later"

      - name: 🏗️ Check application build
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/kelbetty_test?schema=public
        run: npm run build

  # Docker build check
  docker-build:
    name: 🐳 Docker Build Check
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: kelbetty-app:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🧪 Test Docker image
        run: |
          # Run container for testing
          docker run --rm -d --name kelbetty-test -p 3001:3000 kelbetty-app:test
          
          # Wait for startup
          sleep 10
          
          # Check if application responds
          curl -f http://localhost:3001/api/test || exit 1
          
          # Stop container
          docker stop kelbetty-test

  # Security check
  security:
    name: 🔒 Security Check
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔒 NPM security audit
        run: npm audit --audit-level moderate

      - name: 🔍 Snyk vulnerability check
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

  # CI summary
  ci-summary:
    name: 📊 CI Summary
    runs-on: ubuntu-latest
    needs: [lint, test, docker-build, security]
    if: always()

    steps:
      - name: 📊 CI Results
        run: |
          echo "## 🧪 CI/CD Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 Linting | ${{ needs.lint.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 Testing | ${{ needs.test.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🐳 Docker Build | ${{ needs.docker-build.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔒 Security | ${{ needs.security.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Overall Status**: ${{ needs.lint.result == 'success' && needs.test.result == 'success' && needs.docker-build.result == 'success' && '✅ All checks passed' || '❌ Some checks failed' }}" >> $GITHUB_STEP_SUMMARY
